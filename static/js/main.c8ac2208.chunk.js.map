{"version":3,"sources":["components/MultiLevelMenu/Menu.js","components/MultiLevelMenu/Item.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","_templateObject","Menu","props","react_default","a","createElement","children","StyledItem","li","Item_templateObject","level","concat","List","ul","_templateObject2","IconContainer","_templateObject3","Item","_ref","propsOpen","open","onClick","name","className","otherProps","Object","objectWithoutProperties","_useState","useState","_useState2","slicedToArray","setOpen","icon","data-glyph","title","aria-hidden","react","assign","e","React","Children","map","c","cloneElement","defaultProps","MainItem","App_templateObject","App","MultiLevelMenu_Menu","alert","MultiLevelMenu_Item","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2ZAGA,IAAMA,EAAYC,IAAOC,IAAVC,KAQAC,EAFF,SAAAC,GAAK,OAAIC,EAAAC,EAAAC,cAACR,EAAcK,EAAQA,EAAMI,whBCHnD,IAAMC,EAAaT,IAAOU,GAAVC,IAKA,SAAAP,GAAK,OAAqB,IAAhBA,EAAMQ,MAAc,UAAY,WACxC,SAAAR,GAAK,SAAAS,OAAqB,GAAdT,EAAMQ,MAAb,QAKjBE,EAAOd,IAAOe,GAAVC,KAKJC,EAAgBjB,IAAOC,IAAViB,KAMbC,EAAO,SAAAC,GAQP,IAPEC,EAOFD,EAPJE,KACAC,EAMIH,EANJG,QACAf,EAKIY,EALJZ,SACAgB,EAIIJ,EAJJI,KACAZ,EAGIQ,EAHJR,MACAa,EAEIL,EAFJK,UACGC,EACCC,OAAAC,EAAA,EAAAD,CAAAP,EAAA,0DAAAS,EACoBC,mBAAST,GAD7BU,EAAAJ,OAAAK,EAAA,EAAAL,CAAAE,EAAA,GACGP,EADHS,EAAA,GACSE,EADTF,EAAA,GAGEG,EAAO1B,EACXH,EAAAC,EAAAC,cAAA,QACEkB,UAAU,KACVU,aAAYb,EAAO,iBAAmB,gBACtCc,MAAM,YACNC,cAAY,SAGd,GAGF,OACEhC,EAAAC,EAAAC,cAAC+B,EAAA,SAAD,KACEjC,EAAAC,EAAAC,cAACE,EAADkB,OAAAY,OAAA,CACEd,UAAW,SAAWA,EACtBF,QAAS,SAAAiB,GACPP,GAASX,GACTC,EAAQiB,IAEV5B,MAAOA,GACHc,GAEJrB,EAAAC,EAAAC,cAACU,EAAD,KAAgBiB,GACfV,GAEFF,GAAQd,GACPH,EAAAC,EAAAC,cAACO,EAAD,KACG2B,IAAMC,SAASC,IAAInC,EAAU,SAAAoC,GAAC,OAC7BH,IAAMI,aAAaD,EAAG,CAAEhC,MAAOA,EAAQ,SAcnDO,EAAK2B,aAAe,CAClBlC,MAAO,EACPU,MAAM,GAGOH,4HChFf,IAAM4B,EAAW/C,YAAOmB,EAAPnB,CAAHgD,KAiCCC,mLA1BX,OACE5C,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAAC2C,EAAD,KACE7C,EAAAC,EAAAC,cAACwC,EAAD,CACEvB,KAAK,UACLF,MAAI,EACJC,QAAS,kBAAM4B,MAAM,kCAErB9C,EAAAC,EAAAC,cAAC6C,EAAD,CAAM5B,KAAK,aACTnB,EAAAC,EAAAC,cAAC6C,EAAD,CAAM5B,KAAK,mBAEbnB,EAAAC,EAAAC,cAAC6C,EAAD,CAAM5B,KAAK,iBAEbnB,EAAAC,EAAAC,cAAC6C,EAAD,CAAM5B,KAAK,WACTnB,EAAAC,EAAAC,cAAC6C,EAAD,CAAM5B,KAAK,aACTnB,EAAAC,EAAAC,cAAC6C,EAAD,CAAM5B,KAAK,mBAEbnB,EAAAC,EAAAC,cAAC6C,EAAD,CAAM5B,KAAK,iBAEbnB,EAAAC,EAAAC,cAAC6C,EAAD,CAAM5B,KAAK,qBArBH6B,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c8ac2208.chunk.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\n\nconst Container = styled.div`\n  background-color: black;\n  color: lightgray;\n  text-align: left;\n`\n\nconst Menu = props => <Container {...props}>{props.children}</Container>\n\nexport default Menu\n","import React, { Fragment, useState } from \"react\"\nimport styled from \"styled-components\"\nimport PropTypes from \"prop-types\"\n\nimport \"open-iconic/font/css/open-iconic.css\"\n\nconst StyledItem = styled.li`\n  text-indent: 0;\n  list-style-type: none;\n  padding: 15px 0px;\n  border-bottom: 1px solid lightgray;\n  background: ${props => (props.level === 0 ? \"#3C3F46\" : \"#282A2F\")};\n  padding-left: ${props => `${props.level * 20}px`};\n  &:hover {\n    background: \"white\";\n  }\n`\nconst List = styled.ul`\n  padding: 0px;\n  margin: 0px;\n`\n\nconst IconContainer = styled.div`\n  display: inline-block;\n  width: 30px;\n  text-align: center;\n`\n\nconst Item = ({\n  open: propsOpen,\n  onClick,\n  children,\n  name,\n  level,\n  className,\n  ...otherProps\n}) => {\n  const [open, setOpen] = useState(propsOpen)\n\n  const icon = children ? (\n    <span\n      className=\"oi\"\n      data-glyph={open ? \"chevron-bottom\" : \"chevron-right\"}\n      title=\"icon name\"\n      aria-hidden=\"true\"\n    />\n  ) : (\n    \"\"\n  )\n\n  return (\n    <Fragment>\n      <StyledItem\n        className={\"light \" + className}\n        onClick={e => {\n          setOpen(!open)\n          onClick(e)\n        }}\n        level={level}\n        {...otherProps}\n      >\n        <IconContainer>{icon}</IconContainer>\n        {name}\n      </StyledItem>\n      {open && children && (\n        <List>\n          {React.Children.map(children, c =>\n            React.cloneElement(c, { level: level + 1 })\n          )}\n        </List>\n      )}\n    </Fragment>\n  )\n}\n\nItem.propTypes = {\n  /** if the item should be rendered as open the first time */\n  open: PropTypes.bool,\n  name: PropTypes.string\n}\n\nItem.defaultProps = {\n  level: 0,\n  open: false\n}\n\nexport default Item\n","import React, { Component } from \"react\"\nimport Menu from \"./components/MultiLevelMenu/Menu\"\nimport Item from \"./components/MultiLevelMenu/Item\"\nimport styled from \"styled-components\"\nimport \"./App.css\"\n\nconst MainItem = styled(Item)`\n  background: white;\n  color: black;\n`\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Menu>\n          <MainItem\n            name=\"Group 1\"\n            open\n            onClick={() => alert(\"You clicked on the main item\")}\n          >\n            <Item name=\"Sub group\">\n              <Item name=\"Sub Sub Group\" />\n            </Item>\n            <Item name=\"Sub group 2\" />\n          </MainItem>\n          <Item name=\"Group 2\">\n            <Item name=\"Sub group\">\n              <Item name=\"Sub Sub Group\" />\n            </Item>\n            <Item name=\"Sub group 2\" />\n          </Item>\n          <Item name=\"Group 3\" />\n        </Menu>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}